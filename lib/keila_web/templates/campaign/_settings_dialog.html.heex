<div
  id="settings-dialogs"
  style="display: none"
  class="fixed z-10 inset-0 overflow-y-auto bg-black/90 flex items-center justify-center"
  x-on:x-confirm.stop="activeDialog = null"
  x-show.transition="['settings'].includes(activeDialog)"
  x-on:x-cancel.stop="activeDialog = null"
  x-on:x-show.window="activeDialog = ($event.detail && $event.detail.dialog); if (activeDialog) { $nextTick(() => {const el = $el.querySelector(`[data-dialog-for=${activeDialog}] input, [data-dialog-for=${activeDialog}] button`); el.focus()}) }"
  @change.stop="false"
  @input.stop="false"
  @blur.stop="false"
  phx-hook="CampaignSettingsDialogHook"
>
  <div
    id="campaign-settings-dialog"
    x-show="activeDialog == 'settings'"
    class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
    @keydown.escape.prevent="$dispatch('x-cancel')"
    @click.away="$dispatch('x-cancel')"
    data-dialog-for="settings"
  >
    <div
      class="inline-block align-bottom bg-gray-900 rounded-lg text-left overflow-hidden shadow-xl transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full p-8"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-headline"
    >
      <h2 class="text-3xl"><%= gettext("Settings") %></h2>

      <.form
        let={f}
        for={@settings_changeset}
        id="campaign-settings"
        class="grid gap-4"
        phx-submit="update-settings"
        x-on:change="setUnsavedReminder(true)"
        x-data="{type: null}"
        x-init="type = $el.querySelector('[name=\'campaign[settings][type]\']').value"
      >
        <div class="form-row">
          <%= label(f, :sender_id, "Sender") %>

          <%= if not Enum.empty?(@senders) do %>
            <%= with_validation(f, :sender_id) do %>
              <%= select(
                f,
                :sender_id,
                if(input_value(f, :sender_id) == nil,
                  do: [{gettext("Please select a sender"), nil}],
                  else: []
                ) ++
                  Enum.map(@senders, &{"#{&1.name} (#{&1.from_name} <#{&1.from_email}>)", &1.id}),
                class: "text-black w-full"
              ) %>
            <% end %>
          <% else %>
            <p>
              <a
                href={Routes.sender_path(@socket, :new, @current_project.id)}
                class="button button--muted"
              >
                <%= gettext("Create your first sender") %>
              </a>
            </p>
          <% end %>
        </div>

        <div class="form-row">
          <%= inputs_for(f, :settings, fn fs -> %>
            <%= label(fs, :type, "Campaign Type") %>
            <%= select(
              fs,
              :type,
              [
                {gettext("Markdown"), "markdown"},
                {gettext("Text only"), "text"},
                {gettext("Block Editor"), "block"},
                {gettext("MJML"), "mjml"}
              ],
              x_model: "type"
            ) %>
          <% end) %>
        </div>

        <template x-if="type === 'markdown'">
          <div class="form-row-checkbox">
            <%= inputs_for(f, :settings, [skip_hidden: true], fn fs -> %>
              <%= checkbox(fs, :enable_wysiwyg) %>
              <%= label(fs, :enable_wysiwyg, gettext("Enable rich text editor")) %>
            <% end) %>
          </div>
        </template>

        <template x-if="type === 'markdown' || type === 'block'">
          <div class="form-row">
            <%= label(f, :template_id, gettext("Template")) %>

            <%= with_validation(f, :template_id) do %>
              <%= select(
                f,
                :template_id,
                [{gettext("Default"), nil} | Enum.map(@templates, &{&1.name, &1.id})],
                class: "text-black"
              ) %>
            <% end %>
          </div>
        </template>

        <template x-if="type === 'markdown' || type === 'block' || type === 'mjml'">
          <div class="form-row flex flex-col">
            <%= label(f, :preview_text) do %>
              <%= gettext("Preview Text") %><br />
              <span class="text-sm">
                <%= gettext(
                  "Users see this preview before they open your email. Use up to 50 characters."
                ) %>
              </span>
            <% end %>
            <%= with_validation(f, :preview_text) do %>
              <%= textarea(f, :preview_text,
                placeholder: gettext("Can you summarize your campaign in 50 characters?"),
                class: "text-black",
                autofocus: true
              ) %>
            <% end %>
          </div>
        </template>

        <div class="form-row">
          <%= label(f, :segment_id, gettext("Segment")) %>

          <%= with_validation(f, :segment_id) do %>
            <%= select(
              f,
              :segment_id,
              [{gettext("All Contacts"), nil}] ++ Enum.map(@segments, &{&1.name, &1.id}),
              class: "text-black"
            ) %>
          <% end %>
        </div>

        <div class="form-row-checkbox">
          <%= inputs_for(f, :settings, [skip_hidden: true], fn fs -> %>
            <%= checkbox(fs, :do_not_track, checked_value: "false", unchecked_value: "true") %>
            <%= label(fs, :do_not_track, gettext("Enable click/open tracking")) %>
          <% end) %>
        </div>

        <div class="form-row md:col-span-full">
          <%= label(f, :segment_id, gettext("Campaign data")) %>
          <span class="block text-sm mb-2">
            <%= gettext("You can add any JSON object as custom data to your campaign.") %>
          </span>
          <%= with_validation(f, :data) do %>
            <%= case input_value(f, :data) do %>
              <% data when is_map(data) -> %>
                <%= textarea(f, :data,
                  value: Jason.encode!(data),
                  class: "text-white bg-gray-900",
                  rows: 5
                ) %>
              <% _other -> %>
                <%= textarea(f, :data, class: "text-white bg-gray-900", rows: 5) %>
            <% end %>
          <% end %>
        </div>

        <br />
        <div class="flex justify-end gap-8">
          <button class="button button--text button--large" @click.prevent="$dispatch('x-cancel')">
            <%= gettext("Cancel") %>
          </button>
          <button class="button button--cta button--large">
            <%= gettext("Ok") %>
          </button>
        </div>
      </.form>
    </div>
  </div>
</div>
